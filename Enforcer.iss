; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

; for the signing tool put NivshemerSafenet as name and
; signtool sign /tr http://timestamp.digicert.com /td sha256 /a /fd sha256 /n "Nivshemer SECURITY (ISRAEL) LTD"  $p
; for command
#define MyAppName "Nivshemer Enforcer"
#define MyAppVersion "1.0.0"
#define MyAppPublisher "Nivshemer Inc."
#define MyAppURL "https://www.Nivshemersecurity.com/"
#define MyAppExeName "NivshemerSec.OTDefender.Client.exe"
#define MyAppIcoName "NanoLogo.ico"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
;SignTool=NivshemerSafenet $f
AppId={{AB033A89-C8FF-4AF4-A798-46617FC68683}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\Nivshemer\Enforcer
DisableDirPage=yes
DisableWelcomePage=no
DefaultGroupName=Nivshemer
DisableProgramGroupPage=yes
;LicenseFile=LicenseAgreement.rtf
OutputDir=..\Nivshemer.OTDefender.Client.Installer
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputBaseFilename=Enforcer
Compression=lzma
SolidCompression=yes
WizardStyle=modern
AlwaysRestart=yes 
CloseApplications=force
SetupIconFile=NanoLogo.ico
UninstallDisplayIcon={app}\NanoLogo.ico
;VersionInfoProductTextVersion={#GetRevision()}
VersionInfoProductTextVersion=Nivshemer Enforcer

[Messages]
;SetupAppTitle = Setup {#GetRevision()}
;SetupWindowTitle = Setup - {#GetRevision()}
SetupAppTitle = Setup Nivshemer OT Defender
SetupWindowTitle = Setup - Nivshemer OT Defender
WelcomeLabel2=This will install Nivshemer OT Defender on your computer.%n%nIt is recommended that you close all other applications and disable any anti virus before continuing.

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
;Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"


[Tasks]
;Name: "onlineoption"; Description: "&Online installation"; GroupDescription: "Installation type:"; Flags: exclusive unchecked
;Name: "offlineoption"; Description: "&Offline installation"; GroupDescription: "Installation type:";  Flags: exclusive unchecked
;Name: "task"; Description: "Task";

[Dirs]
Name: "{app}\logs"

[UninstallDelete]
Type: files; Name: "{app}\*"

[Files]
Source: "NanoLogo.ico"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\NivshemerSec.OTDefender.Client\bin\release\net6.0-windows\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "FactoryTalk Console Administration backup\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\NivshemerSec.OTDefender.Client\bin\release\net6.0-windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\Nivshemer.EnforcerWatchdog\bin\Release\net5.0\*"; DestDir: "{app}\EnforcerWatchdog"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "script\*"; DestDir: "{app}\cert"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\cert\*"; DestDir: "{app}\cert"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\NivshemerSec.OTDefender.Client\bin\release\net6.0-windows\appsettings.json"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "utils\windowsdesktop-runtime-6.0.31-win-x64.exe"; DestDir: "{app}\utils"; Flags: ignoreversion
Source: "utils\WinPcap_4_1_3.exe"; DestDir: "{app}\utils"; Flags: ignoreversion
Source: "utils\windowsdesktop-runtime-6.0.31-win-x86.exe"; DestDir: "{app}\utils"; Flags: ignoreversion
Source: "utils\windowsdesktop-runtime-5.0.17-win-x64.exe"; DestDir: "{app}\utils"; Flags: ignoreversion
Source: "utils\windowsdesktop-runtime-5.0.17-win-x86.exe"; DestDir: "{app}\utils"; Flags: ignoreversion
Source: "utils\NDP48-x86-x64-AllOS-ENU.exe"; DestDir: "{app}\utils"; Flags: ignoreversion
Source: "utils\vc_redist.x64.exe"; DestDir: "{app}\utils"; Flags: ignoreversion
Source: "utils\vc_redist.x86.exe"; DestDir: "{app}\utils"; Flags: ignoreversion
[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""
Root: HKA; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList\";  ValueType: dword; ValueName: "fDisabledAllowList"; ValueData: "00000001"
Root: HKA; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList\Applications"; 
Root: HKA; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList\Applications\Nivshemer"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList\Applications\Nivshemer";  ValueType: string; ValueName: "Name"; ValueData: "NivshemerSec.OTDefender.Client.exe"
Root: HKA; Subkey: "Software\Microsoft\Windows NT\CurrentVersion\Terminal Server\TSAppAllowList\Applications\Nivshemer";  ValueType: string; ValueName: "Path"; ValueData: "{app}"
Root: HKA; Subkey: "SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; ValueType: String; ValueName: "{app}\NivshemerSec.OTDefender.Client.exe"; ValueData: "RUNASADMIN"; Flags: uninsdeletekeyifempty uninsdeletevalue; 
Root: HKLM; Subkey: "SOFTWARE\Nivshemer\Enforcer\FactoryTalk\SpecifyFTLocation"; ValueType: string; ValueName: "FTUser"; ValueData: "NivshemerLoc"; Flags: uninsdeletekeyifempty; Check: IsWin64
Root: HKLM; Subkey: "SOFTWARE\Nivshemer\Enforcer\FactoryTalk\SpecifyFTLocation"; ValueType: string; ValueName: "FTServer"; ValueData: "OTD-FTSVRDEV"; Flags: uninsdeletekeyifempty; Check: IsWin64
Root: HKLM; Subkey: "SOFTWARE\Nivshemer\Enforcer\FactoryTalk\SpecifyFTLocation"; ValueType: string; ValueName: "FTPw"; ValueData: "XBDWvhSyeCSdBN7LUveW+w=="; Flags: uninsdeletekeyifempty; Check: IsWin64
Root: HKLM; Subkey: "SOFTWARE\WOW6432Node\Nivshemer\Enforcer\FactoryTalk\SpecifyFTLocation"; ValueType: string; ValueName: "FTUser"; ValueData: "NivshemerLoc"; Flags: uninsdeletekeyifempty; Check: not IsWin64
Root: HKLM; Subkey: "SOFTWARE\WOW6432Node\Nivshemer\Enforcer\FactoryTalk\SpecifyFTLocation"; ValueType: string; ValueName: "FTServer"; ValueData: "OTD-FTSVRDEV"; Flags: uninsdeletekeyifempty; Check: not IsWin64
Root: HKLM; Subkey: "SOFTWARE\WOW6432Node\Nivshemer\Enforcer\FactoryTalk\SpecifyFTLocation"; ValueType: string; ValueName: "FTPw"; ValueData: "XBDWvhSyeCSdBN7LUveW+w=="; Flags: uninsdeletekeyifempty; Check: not IsWin64

;Root: HKLM64; Subkey: "SOFTWARE\Nivshemer\Enforcer\FactoryTalk\SpecifyFTLocation"; ValueType: string; ValueName: "FTUser"; ValueData: "NivshemerLoc"; Flags: uninsdeletekeyifempty
;Root: HKLM64; Subkey: "SOFTWARE\Nivshemer\Enforcer\FactoryTalk\SpecifyFTLocation"; ValueType: string; ValueName: "FTPw"; ValueData: "Nk%Loc$9"; Flags: uninsdeletekeyifempty


[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; IconFilename: "{app}\{#MyAppIcoName}"
Name: "{userdesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; \
    IconFilename: "{app}\{#MyAppIcoName}"; Tasks: desktopicon


[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall shellexec skipifsilent
Filename: "{app}\utils\windowsdesktop-runtime-6.0.31-win-x86.exe"; Parameters: "/S" ; Flags: 32bit; StatusMsg: "Installing .net 6.0 x86 dependencies..."  ; Check:not IsWin64  
Filename: "{app}\utils\windowsdesktop-runtime-6.0.31-win-x64.exe"; Parameters: "/S" ; Flags: 64bit; StatusMsg: "Installing .net 6.0 x64 dependencies..."   ; Check:IsWin64
Filename: "{app}\utils\windowsdesktop-runtime-5.0.17-win-x86.exe"; Parameters: "/S" ; Flags: 32bit; StatusMsg: "Installing .net 5.0 x86 dependencies..."  ; Check:not IsWin64  
Filename: "{app}\utils\windowsdesktop-runtime-5.0.17-win-x64.exe"; Parameters: "/S" ; Flags: 64bit; StatusMsg: "Installing .net 5.0 x64 dependencies..."   ; Check:IsWin64  
Filename: "{app}\utils\NDP48-x86-x64-AllOS-ENU.exe"; Parameters: "/S"; StatusMsg: "Installing .NET Framework 4.8 x64 dependencies..."; Check: NeedsDotNet48
Filename: "{app}\utils\WinPcap_4_1_3.exe"; Parameters: "/S"; StatusMsg: "Installing WinPcap..."; Check: not IsWinPcapInstalled
Filename: "{app}\utils\vc_redist.x86.exe"; Parameters: "/S" ; Flags: 32bit; StatusMsg: "Installing vc_redist x86 dependencies..."  ; Check:not IsWin64  
Filename: "{app}\utils\vc_redist.x64.exe"; Parameters: "/S" ; Flags: 64bit; StatusMsg: "Installing vc_redist x64 dependencies..."   ; Check:IsWin64  
;Filename: "powershell.exe"; Parameters: "-ExecutionPolicy Bypass -File ""{app}\cert\set-certificate.ps1"""; WorkingDir: {app}\script; StatusMsg: "Installing certificates..." 
Filename: "{sys}\sc.exe"; Parameters: "create NivshemerWD DisplayName= ""NivshemerWD"" binPath= ""{app}\EnforcerWatchdog\Nivshemer.EnforcerWatchdog.exe"" start= auto" ; Flags: runhidden; StatusMsg: "Installing service..."   
Filename: "{sys}\sc.exe"; Parameters: "start NivshemerWD" ; Flags: runhidden; StatusMsg: "Starting service..." 
Filename: "certutil.exe"; Parameters: "-addstore -user -f ""My"" ""{app}\cert\cert.cer"""; Flags: runhidden; Description: "Installing Certificate"
Filename: "certutil.exe"; Parameters: "-addstore -user -f ""My"" ""{app}\cert\godaddy_class2.cer"""; Flags: runhidden; Description: "Installing Certificate"
Filename: "certutil.exe"; Parameters: "-addstore -user -f ""My"" ""{app}\cert\godaddy_root.cer"""; Flags: runhidden; Description: "Installing Certificate"
;Filename: "certutil.exe"; Parameters: "-f -p """" -user -importPFX ""{app}\cert\27AC9369FAF25207BB2627CEFACCBE4EF9C319B8.pfx"""; Flags: runhidden; Description: "Installing PFX Certificate"
;Filename: "certutil.exe"; Parameters: "-f -p """" -user -importPFX ""{app}\cert\C533FD01BDDC660E9F5C3D78B7F20F42EB8415BF.pfx"""; Flags: runhidden; Description: "Installing PFX Certificate"

[UninstallRun]
Filename: {sys}\sc.exe; Parameters: "stop NivshemerWD" 
Filename: {sys}\sc.exe; Parameters: "delete NivshemerWD" 
Filename: {sys}\sc.exe; Parameters: "tasklist | findstr /i ""Nivshemer"" && taskkill /F /IM ""NivshemerSec.OTDefender.Client.exe"""
Filename: {sys}\sc.exe; Parameters: "tasklist | findstr /i ""Nivshemer"" && taskkill /F /IM ""Nivshemer.EnforcerWatchdog.exe"""
Filename: {sys}\sc.exe; Parameters: "tasklist | findstr /i ""Nivshemer"" && taskkill /F /IM ""Nivshemer.NSA.Host.Process.V15.1.exe"""
Filename: {sys}\sc.exe; Parameters: "tasklist | findstr /i ""Nivshemer"" && taskkill /F /IM ""Nivshemer.NSA.Host.Process.V16.exe"""
Filename: {sys}\sc.exe; Parameters: "tasklist | findstr /i ""Nivshemer"" && taskkill /F /IM ""Nivshemer.NSA.Host.Process.V17.exe"""
Filename: {sys}\sc.exe; Parameters: "tasklist | findstr /i ""Nivshemer"" && taskkill /F /IM ""Nivshemer.NSA.Host.Process.V18.exe"""







[Code]

var

  SelectionPage: TInputOptionWizardPage;
  PrimaryServerPage2: TInputQueryWizardPage;
  UserConfirmed: Boolean;

function UserGroupExists(Group: String): Boolean;
var
  ResultCode: Integer;
begin
  Result := False;

  if Exec('net', 'localgroup "' + Group + '"', '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
  begin
    if ResultCode = 0 then
      Result := True;
  end
  else
  begin
    MsgBox('Error checking user group existence: ' + SysErrorMessage(ResultCode), mbError, MB_OK);
  end;
end;

function IsWindows8OrLater: Boolean;
begin
  Result := (GetWindowsVersion >= $06020000);
end;

function NeedsDotNet48(): Boolean;
var
  Success: Boolean;
  ReleaseValue: Cardinal;
begin
  Success := RegQueryDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full', 'Release', ReleaseValue);
  // Check if .NET 4.8 is installed (Release value for 4.8 is 528040 or higher)
  Result := not Success or (ReleaseValue < 528040);
end;

function ExecCmd(const FileName, Params: AnsiString; const ShowCmd: Integer; var ErrorCode: Integer): AnsiString;
var
  ResultCode: Integer;
  OutputText: AnsiString;
begin
  Result := '';
  OutputText := '';
  if Exec(ExpandConstant(FileName), Params, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then
  begin
    if LoadStringFromFile(ExpandConstant('{tmp}\output.txt'), OutputText) then
      Result := OutputText;
    ErrorCode := ResultCode;
  end;
end;

function GetHKLM() : Integer;

begin
 if IsWin64 then
  begin
    Result := HKLM64;
  end
  else
  begin
    Result := HKEY_LOCAL_MACHINE;
  end;
end;

function AddCurrentUserToGroup(const GroupName: String): Boolean;
var
  CommandOutput: String;
  ErrorCode: Integer;
  CurrentUser: String;
  CurrentPC: String;
  User: String;
begin
  CurrentUser := GetEnv('USERNAME')
  CurrentPC := GetEnv('COMPUTERNAME')
  User := CurrentPC + '\' + CurrentUser
  { Use the 'net' command to add the current user to the group }
  CommandOutput := ExecCmd('net', 'localgroup "' + GroupName + '" "' + User + '" /add', SW_HIDE, ErrorCode);

  { Check the exit code to determine success or failure }
  Result := (ErrorCode = 0);

  { Log the command output (optional) }
  Log('Command Output: ' + CommandOutput);
end;

function GetCurrentUser: String;
begin
  // Retrieve the current user's username
  Result := GetEnv('USERNAME');
end;

function CheckIfTiaExists(): Boolean;
begin
  // Check if any of the registry key paths exist
  Result := RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP18') or
            RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP17') or
            RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP16') or
            RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP15') or
            RegKeyExists(GetHKLM(), 'SOFTWARE\WOW6432Node\Siemens\AUTSW\STEP7') or
            RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP15_1');
end;

function CheckIfOpennessExists(): Boolean;
begin
  // Check if any of the registry key paths exist
  Result := RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\18.0') or
            RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\17.0') or
            RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\16.0') or
            RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\15.0') or            
            RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\15.1');
end;

function IsWinPcapInstalled: Boolean;
begin
  // Check for the existence of the registry key for 64-bit WinPcap on 64-bit Windows
  Result := RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\WOW6432Node\WinPcap');
end;


procedure DisplayExistingRegistryKeys;
var
  MessageText: String;
  KeyExists: Boolean;
begin
  if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation') then
  begin
    if (not RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness')) or 
       (not UserGroupExists('Siemens TIA Openness')) then
    begin
      MessageText := 'To guarantee the Enforcer''s proper interaction with the TIA portal, it''s necessary to have the TIA Openness component installed. Here''s how you can do it:' + #13#10 + #13#10 +
                     '- Initiate the TIA portal installation.' + #13#10 +
                     '- Choose the Modify/Upgrade option.' + #13#10 +
                     '- In the Options section, find and tick the "TIA Openness" checkbox.' + #13#10 +
                     '- Proceed with the installation steps as guided.' + #13#10 +
                     '- After completing the above, please re-run the Enforcer''s installation.' + #13#10 + #13#10 +
                     'If you don''t intend to use the TIA portal, you may proceed with the installation process.' + #13#10 +
                     'If you need any help, don''t hesitate to reach out to your system administrator.' + #13#10;

      KeyExists := False;

      if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP18') then
      begin
        // MessageText := MessageText + 'TIAP18 exists' + #13#10;
        KeyExists := True;
      end;
      if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP17') then
      begin
        // MessageText := MessageText + 'TIAP17 exists' + #13#10;
        KeyExists := True;
      end;
      if RegKeyExists(GetHKLM(), 'SOFTWARE\WOW6432Node\Siemens\AUTSW\STEP7') then
      begin
        // MessageText := MessageText + 'STEP7 exists' + #13#10;
        KeyExists := True;
      end;
      if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP16') then
      begin
        // MessageText := MessageText + 'TIAP16 exists' + #13#10;
        KeyExists := True;
      end;
      if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP15_1') then
      begin
        // MessageText := MessageText + 'TIAP15_1 exists' + #13#10;
        KeyExists := True;
      end;

      if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\18.0') then
      begin
        // MessageText := MessageText + 'Openness 18.0 exists' + #13#10;
        KeyExists := True;
      end;
      if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\17.0') then
      begin
        // MessageText := MessageText + 'Openness TIAP17 exists' + #13#10;
        KeyExists := True;
      end;
      if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\16.0') then
      begin
        // MessageText := MessageText + 'Openness TIAP16 exists' + #13#10;
        KeyExists := True;
      end;
      if RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\Openness\15.1') then
      begin
        // MessageText := MessageText + 'Openness TIAP15_1 exists' + #13#10;
        KeyExists := True;
      end;

      //if not KeyExists then
      //begin
      //  MessageText := 'Warning: None of the versions of Siemens Openness TIAP or Openness exists.' + #13#10 +
      //                 'Please ensure the necessary components are installed.';
      //end;

        MsgBox(MessageText, mbInformation, MB_OK);

    end;
  end;
end;




function InitializeSetup: Boolean;
begin
  Result := True;

  // Display the existing registry keys before starting the installation
  DisplayExistingRegistryKeys;

  // Check if both registry paths exist
  if not CheckIfTiaExists() and not CheckIfOpennessExists() then
  begin
    // MsgBox('One or both of the required registry paths do not exist. Installation proceeds.', mbError, MB_OK);
    Result := True;
  end
  else
  begin
    // Check if the user group "Siemens TIA Openness" exists
    if not UserGroupExists('Siemens TIA Openness') then
    begin
      MsgBox('TIA Openness component is required by the Enforcer application to work properly. To install this component, please run the TIA portal installation, select the Modify/Upgrade, then under Options, check the box TIA Openness and follow the installation process. Once done, run the Enforcer installation again. Contact your administrator for assistance', mbError, MB_OK);
      Result := True; // Proeed with the installation
    end
    else
    begin
      // Adding current user to group "Siemens TIA Openness"
      if not AddCurrentUserToGroup('Siemens TIA Openness') then
      begin
        log('Failed to add the current user to the "Siemens TIA Openness" group.');
        Result := True;
      end;
    end;
  end;
end;




function FileReplaceStringIP(ReplaceString: string):boolean;
var
  MyFile : TStrings;
  MyText : string;
begin
  Log('Replacing in file');
  MyFile := TStringList.Create;

  try
    Result := true;

    try
      MyFile.LoadFromFile(ExpandConstant('{app}' + '\cert\set-certificate.ps1'));
      Log('File loaded');
      MyText := MyFile.Text;

      { Only save if text has been changed. }
      if StringChangeEx(MyText, '$MoTIpAddress', ReplaceString, True) > 0 then
      begin;
        Log('IP address inserted');
        MyFile.Text := MyText;
        MyFile.SaveToFile(ExpandConstant('{app}' + '\cert\set-certificate.ps1'));
        Log('File saved');
      end;
    except
      Result := false;
    end;
  finally
    MyFile.Free;
  end;
  
  Result := True;
end;

function FileReplaceStringIPFT(ReplaceString: string):boolean;
var
  MyFile : TStrings;
  MyText : string;
begin
  Log('Replacing in file');
  MyFile := TStringList.Create;

  try
    Result := true;

    try
      MyFile.LoadFromFile(ExpandConstant('{app}' + '\cert\set-certificate.ps1'));
      Log('File loaded');
      MyText := MyFile.Text;

      { Only save if text has been changed. }
      if StringChangeEx(MyText, '$FTIpAddress', ReplaceString, True) > 0 then
      begin;
        Log('IP address inserted');
        MyFile.Text := MyText;
        MyFile.SaveToFile(ExpandConstant('{app}' + '\cert\set-certificate.ps1'));
        Log('File saved');
      end;
    except
      Result := false;
    end;
  finally
    MyFile.Free;
  end;
  
  Result := True;
end;

function RunPowerShellScript(const FileName, Parameters: string): Integer;
var
  ResultCode: Integer;
begin
  { Execute the PowerShell script asynchronously }
  Exec(FileName, Parameters, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

  { Return the exit code of the PowerShell script }
  Result := ResultCode;
end;



function FileReplaceStringDNS(ReplaceString: string):boolean;
var
  MyFile : TStrings;
  MyText : string;
begin
  Log('Replacing in file');
  MyFile := TStringList.Create;

  try
    Result := true;

    try
      MyFile.LoadFromFile(ExpandConstant('{app}' + '\cert\set-certificate.ps1'));
      Log('File loaded');
      MyText := MyFile.Text;

      { Only save if text has been changed. }
      if StringChangeEx(MyText, '$MoTDNSAddress', ReplaceString, True) > 0 then
      begin;
        Log('IP address inserted');
        MyFile.Text := MyText;
        MyFile.SaveToFile(ExpandConstant('{app}' + '\cert\set-certificate.ps1'));
        Log('File saved');
      end;
    except
      Result := false;
    end;
  finally
    MyFile.Free;
  end;
  
  Result := True;
end;

function NextButtonClick(PageID: Integer): Boolean;
begin
  if PageID = SelectionPage.ID then
  begin
    { Check if at least one option is selected }
    Result := SelectionPage.Values[0] or SelectionPage.Values[1];
    if not Result then
      begin
        MsgBox('Please select at least one option.', mbInformation, MB_OK);
      end;
  end
  else
  begin
    Result := True;
  end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  if PageID = SelectionPage.ID then
  begin
    { Check if at least one option is selected }
    Result := True;
  end
  else
  begin
    Result := False;
  end;
end;

procedure InitializeWizard;
var
  RegKeyExists32: Boolean;
  RegKeyExists64: Boolean;
  RegKeyExistsTIAP17: Boolean;
  RegKeyExistsSTEP7: Boolean;
  Version: TWindowsVersion;
begin


  SelectionPage := CreateInputOptionPage(
    wpSelectTasks, 'Select Supported Modules',
    'Choose one of the following options:', '', False, False);

  // Check if the 32-bit registry key exists
  RegKeyExists32 := RegKeyExists(GetHKLM(), 'SOFTWARE\WOW6432Node\Rockwell Software\RSLogix 5000.1');

  // Check if the 64-bit registry key exists
  RegKeyExists64 := RegKeyExists(GetHKLM(), 'SOFTWARE\Rockwell Software\RSLogix 5000.1');

  RegKeyExistsTIAP17:= RegKeyExists(GetHKLM(), 'SOFTWARE\Siemens\Automation\_InstalledSW\TIAP17');
  RegKeyExistsSTEP7 := RegKeyExists(GetHKLM(), 'SOFTWARE\WOW6432Node\Siemens\AUTSW\STEP7');
  // Add options to the selection page
  SelectionPage.Add('Allen-Bradley/Rockwell');

  SelectionPage.Add('Siemens');


  if RegKeyExists32 or RegKeyExists64 then
  begin
  // You can set the initial selection state if needed
    SelectionPage.CheckListBox.Checked[0] := False;
    SelectionPage.CheckListBox.ItemEnabled[0] := True;
  end
  else
  begin
    SelectionPage.CheckListBox.ItemEnabled[0] := False;
    SelectionPage.CheckListBox.Checked[0] := False;
  end;

  if RegKeyExistsTIAP17 or RegKeyExistsSTEP7 then
  begin
  // You can set the initial selection state if needed
    SelectionPage.CheckListBox.Checked[1] := False;
    SelectionPage.CheckListBox.ItemEnabled[1] := True;
  end
  else
  begin
    SelectionPage.CheckListBox.ItemEnabled[1] := False;
    SelectionPage.CheckListBox.Checked[1] := False;
  end;

  //if not IsWindows10Pro64Bit
  //begin
  //  SelectionPage.CheckListBox.ItemEnabled[1] := False;
  //  SelectionPage.CheckListBox.Checked[1] := False;  
  //end;

  GetWindowsVersionEx(Version);

  PrimaryServerPage2 :=
    CreateInputQueryPage(
      wpWelcome, 'MoT Definition',
      'Enter the domain and IP of the MoT server(ask the Nivshemer administrator)', 'MoT Definition');
  PrimaryServerPage2.Add('Subdomain name and domain name (e.g., otd.Nivshemersecurity.nl)::', False);
  PrimaryServerPage2.Add('Mot IP Address:', False);
  PrimaryServerPage2.Add('FT IP Address(optional):', False);

end;


procedure CurStepChanged(CurStep: TSetupStep);
var
  ScriptPath: string;
  ExitCode: Integer;
begin
  { Check if the current step is the "PostInstall" step }
  if CurStep = ssPostInstall then
  begin

      if SelectionPage.Values[0] then
    begin
      // Component 1 is selected
      //MsgBox('Component 1 is selected.', mbInformation, MB_OK);
      // Computer\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Nivshemer\Enforcer\components
      if RegWriteDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Nivshemer\Enforcer\components','rockwell', 1) then
      begin
        //MsgBox('registry created.', mbInformation, MB_OK);
        Log('registry created.');
      end
      else
      begin
        //MsgBox('error creating registry.', mbInformation, MB_OK);
        Log('error creating registry.');
      end;
      if RegWriteDWordValue(HKEY_LOCAL_MACHINE_32, 'SOFTWARE\Nivshemer\Enforcer\components','rockwell', 1) then
      begin
        //MsgBox('registry 32 created.', mbInformation, MB_OK);
        Log('registry 32 created.');
      end
      else
      begin
        //MsgBox('error creating 32 registry.', mbInformation, MB_OK);
        Log('error creating 32 registry.');
      end;
                    
    end;

    if SelectionPage.Values[1] then
    begin
      // Component 2 is selected
      //MsgBox('Component 2 is selected.', mbInformation, MB_OK);
        // Check the Windows version and edition
      
      if RegWriteDWordValue(HKEY_LOCAL_MACHINE, 'SOFTWARE\Nivshemer\Enforcer\components','siemens', 1) then
      begin
        //MsgBox('registry created.', mbInformation, MB_OK);
        Log('registry created.');
      end
      else
      begin
        //MsgBox('error creating registry.', mbInformation, MB_OK);
        Log('error creating registry.');
      end;
      if RegWriteDWordValue(HKEY_LOCAL_MACHINE_32, 'SOFTWARE\Nivshemer\Enforcer\components','rockwell', 1) then
      begin
        //MsgBox('registry 32 created.', mbInformation, MB_OK);
        Log('registry 32 created.');
      end
      else
      begin
        //MsgBox('error creating 32 registry.', mbInformation, MB_OK);
        Log('error creating 32 registry.');
      end;


    end;

    Log('replacing StringDNS');
    FileReplaceStringIP(PrimaryServerPage2.Values[1]);
    Log('replacing StringIP');
    FileReplaceStringDNS(PrimaryServerPage2.Values[0]);
    // Handle the selected options here based on their values
    Log('replacing FT StringIP');
    FileReplaceStringIPFT(PrimaryServerPage2.Values[2]);
    // Handle the selected options here based on their values
      

    Log('Specify the path to your PowerShell script');
    { Specify the path to your PowerShell script }
    ScriptPath := ExpandConstant('{app}\cert\set-certificate.ps1');
    { Call the custom function to run the PowerShell script }
    Log('Call the custom function to run the PowerShell script');
    ExitCode := RunPowerShellScript('powershell.exe', '-ExecutionPolicy Bypass -File "' + ScriptPath + '"');

  end;
end;